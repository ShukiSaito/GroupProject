// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickTypePlayerDetails;
//
//    var playerDetail = PlayerDetail.FromJson(jsonString);

namespace QuickTypePlayerDetails
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PlayerDetail
    {
        [JsonProperty("PlayerId")]
        public long PlayerId { get; set; }

        [JsonProperty("FirstName")]
        public string FirstName { get; set; }

        [JsonProperty("LastName")]
        public string LastName { get; set; }

        [JsonProperty("CommonName")]
        public string CommonName { get; set; }

        [JsonProperty("ShortName")]
        public string ShortName { get; set; }

        [JsonProperty("Position")]
        public string Position { get; set; }

        [JsonProperty("PositionCategory")]
        public string PositionCategory { get; set; }

        [JsonProperty("Jersey")]
        public long Jersey { get; set; }

        [JsonProperty("Foot")]
        public string Foot { get; set; }

        [JsonProperty("Height")]
        public long Height { get; set; }

        [JsonProperty("Weight")]
        public long Weight { get; set; }

        [JsonProperty("Gender")]
        public string Gender { get; set; }

        [JsonProperty("BirthDate")]
        public DateTimeOffset BirthDate { get; set; }

        [JsonProperty("BirthCity")]
        public string BirthCity { get; set; }

        [JsonProperty("BirthCountry")]
        public string BirthCountry { get; set; }

        [JsonProperty("Nationality")]
        public string Nationality { get; set; }

        [JsonProperty("InjuryStatus")]
        public string InjuryStatus { get; set; }

        [JsonProperty("InjuryBodyPart")]
        public string InjuryBodyPart { get; set; }

        [JsonProperty("InjuryNotes")]
        public string InjuryNotes { get; set; }

        [JsonProperty("InjuryStartDate")]
        public object InjuryStartDate { get; set; }

        [JsonProperty("Updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("PhotoUrl")]
        public Uri PhotoUrl { get; set; }

        [JsonProperty("RotoWirePlayerID")]
        public long RotoWirePlayerId { get; set; }

        [JsonProperty("DraftKingsPosition")]
        public string DraftKingsPosition { get; set; }

        [JsonProperty("UsaTodayPlayerID")]
        public object UsaTodayPlayerId { get; set; }

        [JsonProperty("UsaTodayHeadshotUrl")]
        public object UsaTodayHeadshotUrl { get; set; }

        [JsonProperty("UsaTodayHeadshotNoBackgroundUrl")]
        public object UsaTodayHeadshotNoBackgroundUrl { get; set; }

        [JsonProperty("UsaTodayHeadshotUpdated")]
        public object UsaTodayHeadshotUpdated { get; set; }

        [JsonProperty("UsaTodayHeadshotNoBackgroundUpdated")]
        public object UsaTodayHeadshotNoBackgroundUpdated { get; set; }
    }

    public partial class PlayerDetail
    {
        public static PlayerDetail FromJson(string json) => JsonConvert.DeserializeObject<PlayerDetail>(json, QuickTypePlayerDetails.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PlayerDetail self) => JsonConvert.SerializeObject(self, QuickTypePlayerDetails.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
