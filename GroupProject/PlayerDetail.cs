// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickTypePlayerDetails;
//
//    var playerDetail = PlayerDetail.FromJson(jsonString);

namespace QuickTypePlayerDetails
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PlayerDetail
    {
        [JsonProperty("CompetitionId")]
        public long CompetitionId { get; set; }

        [JsonProperty("AreaId")]
        public long AreaId { get; set; }

        [JsonProperty("AreaName")]
        public AreaName AreaName { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Gender")]
        public Gender Gender { get; set; }

        [JsonProperty("Type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("Format")]
        public string Format { get; set; }

        [JsonProperty("Key")]
        public string Key { get; set; }

        [JsonProperty("CurrentSeason")]
        public Season CurrentSeason { get; set; }

        [JsonProperty("Teams")]
        public Team[] Teams { get; set; }

        [JsonProperty("Games")]
        public Game[] Games { get; set; }

        [JsonProperty("Seasons")]
        public Season[] Seasons { get; set; }
    }

    public partial class Season
    {
        [JsonProperty("SeasonId")]
        public long SeasonId { get; set; }

        [JsonProperty("CompetitionId")]
        public long CompetitionId { get; set; }

        [JsonProperty("Season")]
        public long SeasonSeason { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("CompetitionName")]
        public string CompetitionName { get; set; }

        [JsonProperty("StartDate")]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("EndDate")]
        public DateTimeOffset EndDate { get; set; }

        [JsonProperty("CurrentSeason")]
        public bool CurrentSeason { get; set; }

        [JsonProperty("Rounds")]
        public Round[] Rounds { get; set; }
    }

    public partial class Round
    {
        [JsonProperty("RoundId")]
        public long RoundId { get; set; }

        [JsonProperty("SeasonId")]
        public long SeasonId { get; set; }

        [JsonProperty("Season")]
        public long Season { get; set; }

        [JsonProperty("SeasonType")]
        public long SeasonType { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("StartDate")]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("EndDate")]
        public DateTimeOffset EndDate { get; set; }

        [JsonProperty("CurrentWeek")]
        public long CurrentWeek { get; set; }

        [JsonProperty("CurrentRound")]
        public bool CurrentRound { get; set; }
    }

    public partial class Game
    {
        [JsonProperty("GameId")]
        public long GameId { get; set; }

        [JsonProperty("RoundId")]
        public long RoundId { get; set; }

        [JsonProperty("Season")]
        public long Season { get; set; }

        [JsonProperty("SeasonType")]
        public long SeasonType { get; set; }

        [JsonProperty("Group")]
        public object Group { get; set; }

        [JsonProperty("AwayTeamId")]
        public long AwayTeamId { get; set; }

        [JsonProperty("HomeTeamId")]
        public long HomeTeamId { get; set; }

        [JsonProperty("VenueId")]
        public long VenueId { get; set; }

        [JsonProperty("Day")]
        public DateTimeOffset Day { get; set; }

        [JsonProperty("DateTime")]
        public DateTimeOffset? DateTime { get; set; }

        [JsonProperty("Status")]
        public Status Status { get; set; }

        [JsonProperty("Week")]
        public long Week { get; set; }

        [JsonProperty("Period")]
        public Period Period { get; set; }

        [JsonProperty("Clock")]
        public object Clock { get; set; }

        [JsonProperty("Winner")]
        public Winner Winner { get; set; }

        [JsonProperty("VenueType")]
        public VenueType VenueType { get; set; }

        [JsonProperty("AwayTeamKey")]
        public string AwayTeamKey { get; set; }

        [JsonProperty("AwayTeamName")]
        public string AwayTeamName { get; set; }

        [JsonProperty("AwayTeamCountryCode")]
        public TeamCountryCode AwayTeamCountryCode { get; set; }

        [JsonProperty("AwayTeamScore")]
        public long? AwayTeamScore { get; set; }

        [JsonProperty("AwayTeamScorePeriod1")]
        public long? AwayTeamScorePeriod1 { get; set; }

        [JsonProperty("AwayTeamScorePeriod2")]
        public long? AwayTeamScorePeriod2 { get; set; }

        [JsonProperty("AwayTeamScoreExtraTime")]
        public object AwayTeamScoreExtraTime { get; set; }

        [JsonProperty("AwayTeamScorePenalty")]
        public object AwayTeamScorePenalty { get; set; }

        [JsonProperty("HomeTeamKey")]
        public string HomeTeamKey { get; set; }

        [JsonProperty("HomeTeamName")]
        public string HomeTeamName { get; set; }

        [JsonProperty("HomeTeamCountryCode")]
        public TeamCountryCode HomeTeamCountryCode { get; set; }

        [JsonProperty("HomeTeamScore")]
        public long? HomeTeamScore { get; set; }

        [JsonProperty("HomeTeamScorePeriod1")]
        public long? HomeTeamScorePeriod1 { get; set; }

        [JsonProperty("HomeTeamScorePeriod2")]
        public long? HomeTeamScorePeriod2 { get; set; }

        [JsonProperty("HomeTeamScoreExtraTime")]
        public object HomeTeamScoreExtraTime { get; set; }

        [JsonProperty("HomeTeamScorePenalty")]
        public object HomeTeamScorePenalty { get; set; }

        [JsonProperty("HomeTeamMoneyLine")]
        public long? HomeTeamMoneyLine { get; set; }

        [JsonProperty("AwayTeamMoneyLine")]
        public long? AwayTeamMoneyLine { get; set; }

        [JsonProperty("DrawMoneyLine")]
        public long? DrawMoneyLine { get; set; }

        [JsonProperty("PointSpread")]
        public double? PointSpread { get; set; }

        [JsonProperty("HomeTeamPointSpreadPayout")]
        public long? HomeTeamPointSpreadPayout { get; set; }

        [JsonProperty("AwayTeamPointSpreadPayout")]
        public long? AwayTeamPointSpreadPayout { get; set; }

        [JsonProperty("OverUnder")]
        public double? OverUnder { get; set; }

        [JsonProperty("OverPayout")]
        public long? OverPayout { get; set; }

        [JsonProperty("UnderPayout")]
        public long? UnderPayout { get; set; }

        [JsonProperty("Attendance")]
        public long? Attendance { get; set; }

        [JsonProperty("Updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("UpdatedUtc")]
        public DateTimeOffset UpdatedUtc { get; set; }

        [JsonProperty("GlobalGameId")]
        public long GlobalGameId { get; set; }

        [JsonProperty("GlobalAwayTeamId")]
        public long GlobalAwayTeamId { get; set; }

        [JsonProperty("GlobalHomeTeamId")]
        public long GlobalHomeTeamId { get; set; }

        [JsonProperty("ClockExtra")]
        public object ClockExtra { get; set; }

        [JsonProperty("ClockDisplay")]
        public string ClockDisplay { get; set; }

        [JsonProperty("IsClosed")]
        public bool IsClosed { get; set; }

        [JsonProperty("HomeTeamFormation")]
        public string HomeTeamFormation { get; set; }

        [JsonProperty("AwayTeamFormation")]
        public string AwayTeamFormation { get; set; }

        [JsonProperty("PlayoffAggregateScore")]
        public object PlayoffAggregateScore { get; set; }
    }

    public partial class Team
    {
        [JsonProperty("TeamId")]
        public long TeamId { get; set; }

        [JsonProperty("AreaId")]
        public long AreaId { get; set; }

        [JsonProperty("VenueId")]
        public long VenueId { get; set; }

        [JsonProperty("Key")]
        public string Key { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("FullName")]
        public string FullName { get; set; }

        [JsonProperty("Active")]
        public bool Active { get; set; }

        [JsonProperty("AreaName")]
        public AreaName AreaName { get; set; }

        [JsonProperty("VenueName")]
        public string VenueName { get; set; }

        [JsonProperty("Gender")]
        public Gender Gender { get; set; }

        [JsonProperty("Type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("Address")]
        public string Address { get; set; }

        [JsonProperty("City")]
        public string City { get; set; }

        [JsonProperty("Zip")]
        public string Zip { get; set; }

        [JsonProperty("Phone")]
        public string Phone { get; set; }

        [JsonProperty("Fax")]
        public string Fax { get; set; }

        [JsonProperty("Website")]
        public Uri Website { get; set; }

        [JsonProperty("Email")]
        public string Email { get; set; }

        [JsonProperty("Founded")]
        public long? Founded { get; set; }

        [JsonProperty("ClubColor1")]
        public string ClubColor1 { get; set; }

        [JsonProperty("ClubColor2")]
        public string ClubColor2 { get; set; }

        [JsonProperty("ClubColor3")]
        public string ClubColor3 { get; set; }

        [JsonProperty("Nickname1")]
        public string Nickname1 { get; set; }

        [JsonProperty("Nickname2")]
        public string Nickname2 { get; set; }

        [JsonProperty("Nickname3")]
        public string Nickname3 { get; set; }

        [JsonProperty("WikipediaLogoUrl")]
        public Uri WikipediaLogoUrl { get; set; }

        [JsonProperty("WikipediaWordMarkUrl")]
        public string WikipediaWordMarkUrl { get; set; }

        [JsonProperty("GlobalTeamId")]
        public long GlobalTeamId { get; set; }

        [JsonProperty("Players")]
        public Player[] Players { get; set; }
    }

    public partial class Player
    {
        [JsonProperty("PlayerId")]
        public long PlayerId { get; set; }

        [JsonProperty("FirstName")]
        public string FirstName { get; set; }

        [JsonProperty("LastName")]
        public string LastName { get; set; }

        [JsonProperty("CommonName")]
        public string CommonName { get; set; }

        [JsonProperty("ShortName")]
        public string ShortName { get; set; }

        [JsonProperty("Position")]
        public Position Position { get; set; }

        [JsonProperty("PositionCategory")]
        public Position PositionCategory { get; set; }

        [JsonProperty("Jersey")]
        public long Jersey { get; set; }

        [JsonProperty("Foot")]
        public Foot? Foot { get; set; }

        [JsonProperty("Height")]
        public long? Height { get; set; }

        [JsonProperty("Weight")]
        public long? Weight { get; set; }

        [JsonProperty("Gender")]
        public Gender Gender { get; set; }

        [JsonProperty("BirthDate")]
        public DateTimeOffset BirthDate { get; set; }

        [JsonProperty("BirthCity")]
        public string BirthCity { get; set; }

        [JsonProperty("BirthCountry")]
        public string BirthCountry { get; set; }

        [JsonProperty("Nationality")]
        public string Nationality { get; set; }

        [JsonProperty("InjuryStatus")]
        public Winner InjuryStatus { get; set; }

        [JsonProperty("InjuryBodyPart")]
        public Winner InjuryBodyPart { get; set; }

        [JsonProperty("InjuryNotes")]
        public Winner InjuryNotes { get; set; }

        [JsonProperty("InjuryStartDate")]
        public DateTimeOffset? InjuryStartDate { get; set; }

        [JsonProperty("Updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("PhotoUrl")]
        public Uri PhotoUrl { get; set; }

        [JsonProperty("RotoWirePlayerID")]
        public long? RotoWirePlayerId { get; set; }

        [JsonProperty("DraftKingsPosition")]
        public Position? DraftKingsPosition { get; set; }

        [JsonProperty("UsaTodayPlayerID")]
        public long? UsaTodayPlayerId { get; set; }

        [JsonProperty("UsaTodayHeadshotUrl")]
        public Uri UsaTodayHeadshotUrl { get; set; }

        [JsonProperty("UsaTodayHeadshotNoBackgroundUrl")]
        public object UsaTodayHeadshotNoBackgroundUrl { get; set; }

        [JsonProperty("UsaTodayHeadshotUpdated")]
        public DateTimeOffset? UsaTodayHeadshotUpdated { get; set; }

        [JsonProperty("UsaTodayHeadshotNoBackgroundUpdated")]
        public object UsaTodayHeadshotNoBackgroundUpdated { get; set; }
    }

    public enum AreaName { England };

    public enum TeamCountryCode { Eng };

    public enum Period { Regular };

    public enum Status { Final, Postponed, Scheduled };

    public enum VenueType { HomeAway };

    public enum Winner { Scrambled };

    public enum Gender { Male };

    public enum Position { A, D, F, Gk, M, MF };

    public enum Foot { Both, Left, Right };

    public enum TypeEnum { Club };

    public partial class PlayerDetail
    {
        public static PlayerDetail FromJson(string json) => JsonConvert.DeserializeObject<PlayerDetail>(json, QuickTypePlayerDetails.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PlayerDetail self) => JsonConvert.SerializeObject(self, QuickTypePlayerDetails.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AreaNameConverter.Singleton,
                TeamCountryCodeConverter.Singleton,
                PeriodConverter.Singleton,
                StatusConverter.Singleton,
                VenueTypeConverter.Singleton,
                WinnerConverter.Singleton,
                GenderConverter.Singleton,
                PositionConverter.Singleton,
                FootConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AreaNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AreaName) || t == typeof(AreaName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "England")
            {
                return AreaName.England;
            }
            throw new Exception("Cannot unmarshal type AreaName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AreaName)untypedValue;
            if (value == AreaName.England)
            {
                serializer.Serialize(writer, "England");
                return;
            }
            throw new Exception("Cannot marshal type AreaName");
        }

        public static readonly AreaNameConverter Singleton = new AreaNameConverter();
    }

    internal class TeamCountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TeamCountryCode) || t == typeof(TeamCountryCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "ENG")
            {
                return TeamCountryCode.Eng;
            }
            throw new Exception("Cannot unmarshal type TeamCountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TeamCountryCode)untypedValue;
            if (value == TeamCountryCode.Eng)
            {
                serializer.Serialize(writer, "ENG");
                return;
            }
            throw new Exception("Cannot marshal type TeamCountryCode");
        }

        public static readonly TeamCountryCodeConverter Singleton = new TeamCountryCodeConverter();
    }

    internal class PeriodConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Period) || t == typeof(Period?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Regular")
            {
                return Period.Regular;
            }
            throw new Exception("Cannot unmarshal type Period");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Period)untypedValue;
            if (value == Period.Regular)
            {
                serializer.Serialize(writer, "Regular");
                return;
            }
            throw new Exception("Cannot marshal type Period");
        }

        public static readonly PeriodConverter Singleton = new PeriodConverter();
    }

    internal class StatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Final":
                    return Status.Final;
                case "Postponed":
                    return Status.Postponed;
                case "Scheduled":
                    return Status.Scheduled;
            }
            throw new Exception("Cannot unmarshal type Status");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Status)untypedValue;
            switch (value)
            {
                case Status.Final:
                    serializer.Serialize(writer, "Final");
                    return;
                case Status.Postponed:
                    serializer.Serialize(writer, "Postponed");
                    return;
                case Status.Scheduled:
                    serializer.Serialize(writer, "Scheduled");
                    return;
            }
            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }

    internal class VenueTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VenueType) || t == typeof(VenueType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Home Away")
            {
                return VenueType.HomeAway;
            }
            throw new Exception("Cannot unmarshal type VenueType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VenueType)untypedValue;
            if (value == VenueType.HomeAway)
            {
                serializer.Serialize(writer, "Home Away");
                return;
            }
            throw new Exception("Cannot marshal type VenueType");
        }

        public static readonly VenueTypeConverter Singleton = new VenueTypeConverter();
    }

    internal class WinnerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Winner) || t == typeof(Winner?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Scrambled")
            {
                return Winner.Scrambled;
            }
            throw new Exception("Cannot unmarshal type Winner");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Winner)untypedValue;
            if (value == Winner.Scrambled)
            {
                serializer.Serialize(writer, "Scrambled");
                return;
            }
            throw new Exception("Cannot marshal type Winner");
        }

        public static readonly WinnerConverter Singleton = new WinnerConverter();
    }

    internal class GenderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gender) || t == typeof(Gender?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Male")
            {
                return Gender.Male;
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Gender)untypedValue;
            if (value == Gender.Male)
            {
                serializer.Serialize(writer, "Male");
                return;
            }
            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly GenderConverter Singleton = new GenderConverter();
    }

    internal class PositionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Position) || t == typeof(Position?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "A":
                    return Position.A;
                case "D":
                    return Position.D;
                case "F":
                    return Position.F;
                case "GK":
                    return Position.Gk;
                case "M":
                    return Position.M;
                case "M/F":
                    return Position.MF;
            }
            throw new Exception("Cannot unmarshal type Position");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Position)untypedValue;
            switch (value)
            {
                case Position.A:
                    serializer.Serialize(writer, "A");
                    return;
                case Position.D:
                    serializer.Serialize(writer, "D");
                    return;
                case Position.F:
                    serializer.Serialize(writer, "F");
                    return;
                case Position.Gk:
                    serializer.Serialize(writer, "GK");
                    return;
                case Position.M:
                    serializer.Serialize(writer, "M");
                    return;
                case Position.MF:
                    serializer.Serialize(writer, "M/F");
                    return;
            }
            throw new Exception("Cannot marshal type Position");
        }

        public static readonly PositionConverter Singleton = new PositionConverter();
    }

    internal class FootConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Foot) || t == typeof(Foot?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Both":
                    return Foot.Both;
                case "Left":
                    return Foot.Left;
                case "Right":
                    return Foot.Right;
            }
            throw new Exception("Cannot unmarshal type Foot");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Foot)untypedValue;
            switch (value)
            {
                case Foot.Both:
                    serializer.Serialize(writer, "Both");
                    return;
                case Foot.Left:
                    serializer.Serialize(writer, "Left");
                    return;
                case Foot.Right:
                    serializer.Serialize(writer, "Right");
                    return;
            }
            throw new Exception("Cannot marshal type Foot");
        }

        public static readonly FootConverter Singleton = new FootConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Club")
            {
                return TypeEnum.Club;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Club)
            {
                serializer.Serialize(writer, "Club");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
