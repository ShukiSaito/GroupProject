// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var playerInfo = PlayerInfo.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PlayerInfo
    {
        [JsonProperty("StatId")]
        public long StatId { get; set; }

        [JsonProperty("SeasonType")]
        public long SeasonType { get; set; }

        [JsonProperty("Season")]
        public long Season { get; set; }

        [JsonProperty("RoundId")]
        public long RoundId { get; set; }

        [JsonProperty("TeamId")]
        public long TeamId { get; set; }

        [JsonProperty("PlayerId")]
        public long PlayerId { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("ShortName")]
        public string ShortName { get; set; }

        [JsonProperty("Team")]
        public string Team { get; set; }

        [JsonProperty("PositionCategory")]
        public Position PositionCategory { get; set; }

        [JsonProperty("Position")]
        public Position Position { get; set; }

        [JsonProperty("Started")]
        public long Started { get; set; }

        [JsonProperty("GlobalTeamId")]
        public long GlobalTeamId { get; set; }

        [JsonProperty("Updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("UpdatedUtc")]
        public DateTimeOffset UpdatedUtc { get; set; }

        [JsonProperty("Games")]
        public long Games { get; set; }

        [JsonProperty("FantasyPoints")]
        public double FantasyPoints { get; set; }

        [JsonProperty("FantasyPointsFanDuel")]
        public object FantasyPointsFanDuel { get; set; }

        [JsonProperty("FantasyPointsDraftKings")]
        public double FantasyPointsDraftKings { get; set; }

        [JsonProperty("FantasyPointsYahoo")]
        public object FantasyPointsYahoo { get; set; }

        [JsonProperty("FantasyPointsMondogoal")]
        public double FantasyPointsMondogoal { get; set; }

        [JsonProperty("Minutes")]
        public double Minutes { get; set; }

        [JsonProperty("Goals")]
        public double Goals { get; set; }

        [JsonProperty("Assists")]
        public double Assists { get; set; }

        [JsonProperty("Shots")]
        public double Shots { get; set; }

        [JsonProperty("ShotsOnGoal")]
        public double ShotsOnGoal { get; set; }

        [JsonProperty("YellowCards")]
        public double YellowCards { get; set; }

        [JsonProperty("RedCards")]
        public double RedCards { get; set; }

        [JsonProperty("YellowRedCards")]
        public double YellowRedCards { get; set; }

        [JsonProperty("Crosses")]
        public double Crosses { get; set; }

        [JsonProperty("TacklesWon")]
        public double TacklesWon { get; set; }

        [JsonProperty("Interceptions")]
        public double Interceptions { get; set; }

        [JsonProperty("OwnGoals")]
        public double OwnGoals { get; set; }

        [JsonProperty("Fouls")]
        public double Fouls { get; set; }

        [JsonProperty("Fouled")]
        public double Fouled { get; set; }

        [JsonProperty("Offsides")]
        public double Offsides { get; set; }

        [JsonProperty("Passes")]
        public double Passes { get; set; }

        [JsonProperty("PassesCompleted")]
        public double PassesCompleted { get; set; }

        [JsonProperty("LastManTackle")]
        public double LastManTackle { get; set; }

        [JsonProperty("CornersWon")]
        public double CornersWon { get; set; }

        [JsonProperty("BlockedShots")]
        public double BlockedShots { get; set; }

        [JsonProperty("Touches")]
        public double Touches { get; set; }

        [JsonProperty("DefenderCleanSheets")]
        public double DefenderCleanSheets { get; set; }

        [JsonProperty("GoalkeeperSaves")]
        public double GoalkeeperSaves { get; set; }

        [JsonProperty("GoalkeeperGoalsAgainst")]
        public double GoalkeeperGoalsAgainst { get; set; }

        [JsonProperty("GoalkeeperSingleGoalAgainst")]
        public double GoalkeeperSingleGoalAgainst { get; set; }

        [JsonProperty("GoalkeeperCleanSheets")]
        public double GoalkeeperCleanSheets { get; set; }

        [JsonProperty("GoalkeeperWins")]
        public double GoalkeeperWins { get; set; }

        [JsonProperty("PenaltyKickGoals")]
        public double PenaltyKickGoals { get; set; }

        [JsonProperty("PenaltyKickMisses")]
        public double PenaltyKickMisses { get; set; }

        [JsonProperty("PenaltyKickSaves")]
        public double PenaltyKickSaves { get; set; }

        [JsonProperty("PenaltiesWon")]
        public double PenaltiesWon { get; set; }

        [JsonProperty("PenaltiesConceded")]
        public double PenaltiesConceded { get; set; }

        [JsonProperty("Score")]
        public double Score { get; set; }

        [JsonProperty("OpponentScore")]
        public double OpponentScore { get; set; }
    }

    public enum Position { A, D, Gk, M };

    public enum Team { AfcBournemouth, ArsenalFc, AstonVillaFc, BrightonHoveAlbionFc, BurnleyFc, ChelseaFc, CrystalPalaceFc, EvertonFc, LeicesterCityFc, LiverpoolFc, ManchesterCityFc, ManchesterUnitedFc, NewcastleUnitedFc, NorwichCityFc, SheffieldUnitedFc, SouthamptonFc, TottenhamHotspurFc, WatfordFc, WestHamUnitedFc, WolverhamptonWanderersFc };

    public partial class PlayerInfo
    {
        public static PlayerInfo[] FromJson(string json) => JsonConvert.DeserializeObject<PlayerInfo[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PlayerInfo[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PositionConverter.Singleton,
                TeamConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PositionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Position) || t == typeof(Position?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "A":
                    return Position.A;
                case "D":
                    return Position.D;
                case "GK":
                    return Position.Gk;
                case "M":
                    return Position.M;
            }
            throw new Exception("Cannot unmarshal type Position");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Position)untypedValue;
            switch (value)
            {
                case Position.A:
                    serializer.Serialize(writer, "A");
                    return;
                case Position.D:
                    serializer.Serialize(writer, "D");
                    return;
                case Position.Gk:
                    serializer.Serialize(writer, "GK");
                    return;
                case Position.M:
                    serializer.Serialize(writer, "M");
                    return;
            }
            throw new Exception("Cannot marshal type Position");
        }

        public static readonly PositionConverter Singleton = new PositionConverter();
    }

    internal class TeamConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Team) || t == typeof(Team?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AFC Bournemouth":
                    return Team.AfcBournemouth;
                case "Arsenal FC":
                    return Team.ArsenalFc;
                case "Aston Villa FC":
                    return Team.AstonVillaFc;
                case "Brighton & Hove Albion FC":
                    return Team.BrightonHoveAlbionFc;
                case "Burnley FC":
                    return Team.BurnleyFc;
                case "Chelsea FC":
                    return Team.ChelseaFc;
                case "Crystal Palace FC":
                    return Team.CrystalPalaceFc;
                case "Everton FC":
                    return Team.EvertonFc;
                case "Leicester City FC":
                    return Team.LeicesterCityFc;
                case "Liverpool FC":
                    return Team.LiverpoolFc;
                case "Manchester City FC":
                    return Team.ManchesterCityFc;
                case "Manchester United FC":
                    return Team.ManchesterUnitedFc;
                case "Newcastle United FC":
                    return Team.NewcastleUnitedFc;
                case "Norwich City FC":
                    return Team.NorwichCityFc;
                case "Sheffield United FC":
                    return Team.SheffieldUnitedFc;
                case "Southampton FC":
                    return Team.SouthamptonFc;
                case "Tottenham Hotspur FC":
                    return Team.TottenhamHotspurFc;
                case "Watford FC":
                    return Team.WatfordFc;
                case "West Ham United FC":
                    return Team.WestHamUnitedFc;
                case "Wolverhampton Wanderers FC":
                    return Team.WolverhamptonWanderersFc;
            }
            throw new Exception("Cannot unmarshal type Team");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Team)untypedValue;
            switch (value)
            {
                case Team.AfcBournemouth:
                    serializer.Serialize(writer, "AFC Bournemouth");
                    return;
                case Team.ArsenalFc:
                    serializer.Serialize(writer, "Arsenal FC");
                    return;
                case Team.AstonVillaFc:
                    serializer.Serialize(writer, "Aston Villa FC");
                    return;
                case Team.BrightonHoveAlbionFc:
                    serializer.Serialize(writer, "Brighton & Hove Albion FC");
                    return;
                case Team.BurnleyFc:
                    serializer.Serialize(writer, "Burnley FC");
                    return;
                case Team.ChelseaFc:
                    serializer.Serialize(writer, "Chelsea FC");
                    return;
                case Team.CrystalPalaceFc:
                    serializer.Serialize(writer, "Crystal Palace FC");
                    return;
                case Team.EvertonFc:
                    serializer.Serialize(writer, "Everton FC");
                    return;
                case Team.LeicesterCityFc:
                    serializer.Serialize(writer, "Leicester City FC");
                    return;
                case Team.LiverpoolFc:
                    serializer.Serialize(writer, "Liverpool FC");
                    return;
                case Team.ManchesterCityFc:
                    serializer.Serialize(writer, "Manchester City FC");
                    return;
                case Team.ManchesterUnitedFc:
                    serializer.Serialize(writer, "Manchester United FC");
                    return;
                case Team.NewcastleUnitedFc:
                    serializer.Serialize(writer, "Newcastle United FC");
                    return;
                case Team.NorwichCityFc:
                    serializer.Serialize(writer, "Norwich City FC");
                    return;
                case Team.SheffieldUnitedFc:
                    serializer.Serialize(writer, "Sheffield United FC");
                    return;
                case Team.SouthamptonFc:
                    serializer.Serialize(writer, "Southampton FC");
                    return;
                case Team.TottenhamHotspurFc:
                    serializer.Serialize(writer, "Tottenham Hotspur FC");
                    return;
                case Team.WatfordFc:
                    serializer.Serialize(writer, "Watford FC");
                    return;
                case Team.WestHamUnitedFc:
                    serializer.Serialize(writer, "West Ham United FC");
                    return;
                case Team.WolverhamptonWanderersFc:
                    serializer.Serialize(writer, "Wolverhampton Wanderers FC");
                    return;
            }
            throw new Exception("Cannot marshal type Team");
        }

        public static readonly TeamConverter Singleton = new TeamConverter();
    }
}
